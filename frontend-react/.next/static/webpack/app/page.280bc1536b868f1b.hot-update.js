"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   handleApiError: function() { return /* binding */ handleApiError; },\n/* harmony export */   handleApiSuccess: function() { return /* binding */ handleApiSuccess; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nclass ApiClient {\n    setupInterceptors() {\n        // リクエストインターセプター\n        this.client.interceptors.request.use((config)=>{\n            if (this.token) {\n                config.headers.Authorization = \"Bearer \".concat(this.token);\n            }\n            // リクエストIDを追加（デバッグ用）\n            if (true) {\n                config.headers[\"X-Request-ID\"] = Math.random().toString(36).substr(2, 9);\n            }\n            return config;\n        }, (error)=>{\n            console.error(\"Request interceptor error:\", error);\n            return Promise.reject(error);\n        });\n        // レスポンスインターセプター\n        this.client.interceptors.response.use((response)=>{\n            // 成功レスポンスのログ\n            if (true) {\n                var _response_config_method;\n                console.log(\"API Success: \".concat((_response_config_method = response.config.method) === null || _response_config_method === void 0 ? void 0 : _response_config_method.toUpperCase(), \" \").concat(response.config.url));\n            }\n            return response;\n        }, async (error)=>{\n            var _error_config, _error_config1, _error_response, _error_response1, _error_response2;\n            // エラーログ\n            console.error(\"API Error:\", {\n                url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url,\n                method: (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.method,\n                status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n                message: error.message\n            });\n            // 401エラーの処理\n            if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 401) {\n                this.clearToken();\n                if (true) {\n                    // 現在のページがログインページでない場合のみリダイレクト\n                    if (!window.location.pathname.includes(\"/login\")) {\n                        window.location.href = \"/login\";\n                    }\n                }\n            }\n            // レート制限エラーの処理\n            if (((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status) === 429) {\n                const retryAfter = error.response.headers[\"retry-after\"];\n                if (retryAfter) {\n                    console.warn(\"Rate limited. Retry after \".concat(retryAfter, \" seconds\"));\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n    restoreToken() {\n        if (true) {\n            this.token = localStorage.getItem(\"access_token\");\n        }\n    }\n    async retryRequest(requestFn) {\n        let retryCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        try {\n            return await requestFn();\n        } catch (error) {\n            if (retryCount < this.retryConfig.retries) {\n                var _this_retryConfig_retryCondition, _this_retryConfig;\n                const axiosError = error;\n                if ((_this_retryConfig_retryCondition = (_this_retryConfig = this.retryConfig).retryCondition) === null || _this_retryConfig_retryCondition === void 0 ? void 0 : _this_retryConfig_retryCondition.call(_this_retryConfig, axiosError)) {\n                    console.log(\"Retrying request (\".concat(retryCount + 1, \"/\").concat(this.retryConfig.retries, \")\"));\n                    await new Promise((resolve)=>setTimeout(resolve, this.retryConfig.retryDelay * (retryCount + 1)));\n                    return this.retryRequest(requestFn, retryCount + 1);\n                }\n            }\n            throw error;\n        }\n    }\n    // トークン管理\n    setToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(\"access_token\", token);\n        }\n    }\n    clearToken() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem(\"access_token\");\n        }\n    }\n    // 認証関連\n    async login(data) {\n        return this.retryRequest(async ()=>{\n            const response = await this.client.post(\"/api/auth/login\", data);\n            this.setToken(response.data.access_token);\n            return response.data;\n        });\n    }\n    async register(data) {\n        return this.retryRequest(async ()=>{\n            const response = await this.client.post(\"/api/auth/register\", data);\n            this.setToken(response.data.access_token);\n            return response.data;\n        });\n    }\n    async logout() {\n        try {\n            // トークンがある場合のみlogoutエンドポイントを呼び出し\n            if (this.token) {\n                await this.retryRequest(async ()=>{\n                    await this.client.post(\"/api/auth/logout\");\n                });\n            }\n        } catch (error) {\n            console.error(\"Logout API failed:\", error);\n        // APIエラーが発生してもトークンは削除する\n        } finally{\n            this.clearToken();\n        }\n    }\n    async getCurrentUser() {\n        return this.retryRequest(async ()=>{\n            const response = await this.client.get(\"/api/auth/me\");\n            return response.data;\n        });\n    }\n    // 練習種別関連\n    async getWorkoutTypes() {\n        const response = await this.client.get(\"/api/workout-types/\");\n        return response.data;\n    }\n    // 練習記録関連\n    async getWorkouts(params) {\n        const response = await this.client.get(\"/api/workouts/\", {\n            params\n        });\n        return response.data;\n    }\n    async getWorkout(id) {\n        const response = await this.client.get(\"/api/workouts/\".concat(id));\n        return response.data;\n    }\n    async createWorkout(data) {\n        const response = await this.client.post(\"/api/workouts/\", data);\n        return response.data;\n    }\n    async updateWorkout(id, data) {\n        const response = await this.client.put(\"/api/workouts/\".concat(id), data);\n        return response.data;\n    }\n    async deleteWorkout(id) {\n        await this.client.delete(\"/api/workouts/\".concat(id));\n    }\n    // CSV インポート関連\n    async previewCSVImport(file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const response = await this.client.post(\"/api/workouts/import/csv\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data.data;\n    }\n    async confirmCSVImport(file, workoutDate, workoutTypeId, intensity) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"workout_date\", workoutDate);\n        formData.append(\"workout_type_id\", workoutTypeId);\n        formData.append(\"intensity\", intensity.toString());\n        const response = await this.client.post(\"/api/workouts/import/confirm\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data.data;\n    }\n    // レース結果関連\n    async getRaces(params) {\n        const response = await this.client.get(\"/api/races/\", {\n            params\n        });\n        return response.data;\n    }\n    async getRace(id) {\n        const response = await this.client.get(\"/api/races/\".concat(id));\n        return response.data;\n    }\n    async createRace(data) {\n        const response = await this.client.post(\"/api/races/\", data);\n        return response.data;\n    }\n    async updateRace(id, data) {\n        const response = await this.client.put(\"/api/races/\".concat(id), data);\n        return response.data;\n    }\n    async deleteRace(id) {\n        await this.client.delete(\"/api/races/\".concat(id));\n    }\n    // 予測関連\n    async getPredictions(params) {\n        const response = await this.client.get(\"/api/predictions/\", {\n            params\n        });\n        return response.data;\n    }\n    async createPrediction(raceType, distanceMeters) {\n        const response = await this.client.post(\"/api/predictions/\", {\n            race_type: raceType,\n            distance_meters: distanceMeters\n        });\n        return response.data;\n    }\n    // ダッシュボード関連\n    async getDashboardStats() {\n        const response = await this.client.get(\"/api/dashboard/stats\");\n        return response.data;\n    }\n    // ヘルスチェック\n    async healthCheck() {\n        const response = await this.client.get(\"/health\");\n        return response.data;\n    }\n    constructor(){\n        this.token = null;\n        this.retryConfig = {\n            retries: 3,\n            retryDelay: 1000,\n            retryCondition: (error)=>{\n                // ネットワークエラーまたは5xxエラーの場合のみリトライ\n                return !error.response || error.response.status >= 500 && error.response.status < 600;\n            }\n        };\n        this.client = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: \"http://localhost:8000\" || 0,\n            timeout: 30000,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        this.setupInterceptors();\n        this.restoreToken();\n    }\n}\n// シングルトンインスタンス\nconst apiClient = new ApiClient();\n// エラーハンドリング用のヘルパー関数\nconst handleApiError = (error)=>{\n    // Axiosエラーの場合\n    if (error.response) {\n        const { status, data } = error.response;\n        // バックエンドからのエラーレスポンス\n        if ((data === null || data === void 0 ? void 0 : data.error) && (data === null || data === void 0 ? void 0 : data.message)) {\n            return {\n                error_type: data.error,\n                message: data.message,\n                suggestion: data.suggestion || getDefaultSuggestion(status),\n                status_code: status\n            };\n        }\n        // 一般的なHTTPエラー\n        return {\n            error_type: \"http_error\",\n            message: getHttpErrorMessage(status),\n            suggestion: getDefaultSuggestion(status),\n            status_code: status\n        };\n    }\n    // ネットワークエラー\n    if (error.request) {\n        return {\n            error_type: \"network_error\",\n            message: \"ネットワークエラーが発生しました\",\n            suggestion: \"インターネット接続を確認してください\"\n        };\n    }\n    // その他のエラー\n    return {\n        error_type: \"unknown_error\",\n        message: error.message || \"不明なエラーが発生しました\",\n        suggestion: \"しばらく時間をおいてから再試行してください\"\n    };\n};\n// HTTPステータスコードに応じたメッセージを取得\nconst getHttpErrorMessage = (status)=>{\n    switch(status){\n        case 400:\n            return \"リクエストが正しくありません\";\n        case 401:\n            return \"認証が必要です\";\n        case 403:\n            return \"アクセス権限がありません\";\n        case 404:\n            return \"リソースが見つかりません\";\n        case 409:\n            return \"データの競合が発生しました\";\n        case 422:\n            return \"入力データに問題があります\";\n        case 429:\n            return \"リクエスト制限に達しました\";\n        case 500:\n            return \"サーバーエラーが発生しました\";\n        case 502:\n            return \"サーバーが利用できません\";\n        case 503:\n            return \"サービスが一時的に利用できません\";\n        default:\n            return \"エラーが発生しました (\".concat(status, \")\");\n    }\n};\n// デフォルトの提案メッセージを取得\nconst getDefaultSuggestion = (status)=>{\n    switch(status){\n        case 400:\n        case 422:\n            return \"入力内容を確認してください\";\n        case 401:\n            return \"ログインし直してください\";\n        case 403:\n            return \"管理者にお問い合わせください\";\n        case 404:\n            return \"URLを確認してください\";\n        case 409:\n            return \"データを更新してから再試行してください\";\n        case 429:\n            return \"しばらく時間をおいてから再試行してください\";\n        case 500:\n        case 502:\n        case 503:\n            return \"しばらく時間をおいてから再試行してください\";\n        default:\n            return \"しばらく時間をおいてから再試行してください\";\n    }\n};\n// 成功レスポンス用のヘルパー関数\nconst handleApiSuccess = (response)=>{\n    return response.data.data;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});